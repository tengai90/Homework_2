//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("EncyclopediaModel", "FK_LanguageIDE_IDE", "IDE", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LanguagesEncyclopedia.Views.Home.IDE), "LanguageIDE", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LanguagesEncyclopedia.Views.Home.LanguageIDE), true)]
[assembly: EdmRelationshipAttribute("EncyclopediaModel", "FK_LicenseIDE_IDE", "IDE", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LanguagesEncyclopedia.Views.Home.IDE), "LicenseIDE", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LanguagesEncyclopedia.Views.Home.LicenseIDE), true)]
[assembly: EdmRelationshipAttribute("EncyclopediaModel", "FK_LanguageIDE_Language", "Language", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LanguagesEncyclopedia.Views.Home.Language), "LanguageIDE", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LanguagesEncyclopedia.Views.Home.LanguageIDE), true)]
[assembly: EdmRelationshipAttribute("EncyclopediaModel", "FK_LanguageParadigm_Language", "Language", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LanguagesEncyclopedia.Views.Home.Language), "LanguageParadigm", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LanguagesEncyclopedia.Views.Home.LanguageParadigm), true)]
[assembly: EdmRelationshipAttribute("EncyclopediaModel", "FK_LanguageRelationship_Language", "Language", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LanguagesEncyclopedia.Views.Home.Language), "LanguageRelationship", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LanguagesEncyclopedia.Views.Home.LanguageRelationship), true)]
[assembly: EdmRelationshipAttribute("EncyclopediaModel", "FK_LanguageRelationship_Language1", "Language", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LanguagesEncyclopedia.Views.Home.Language), "LanguageRelationship", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LanguagesEncyclopedia.Views.Home.LanguageRelationship), true)]
[assembly: EdmRelationshipAttribute("EncyclopediaModel", "FK_LanguageTask_Language", "Language", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LanguagesEncyclopedia.Views.Home.Language), "LanguageTask", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LanguagesEncyclopedia.Views.Home.LanguageTask), true)]
[assembly: EdmRelationshipAttribute("EncyclopediaModel", "FK_LanguageParadigm_Paradigm", "Paradigm", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LanguagesEncyclopedia.Views.Home.Paradigm), "LanguageParadigm", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LanguagesEncyclopedia.Views.Home.LanguageParadigm), true)]
[assembly: EdmRelationshipAttribute("EncyclopediaModel", "FK_LanguageTask_Task", "Task", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LanguagesEncyclopedia.Views.Home.Task), "LanguageTask", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LanguagesEncyclopedia.Views.Home.LanguageTask), true)]
[assembly: EdmRelationshipAttribute("EncyclopediaModel", "FK_Solution_LanguageTask", "LanguageTask", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LanguagesEncyclopedia.Views.Home.LanguageTask), "Solution", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LanguagesEncyclopedia.Views.Home.Solution), true)]
[assembly: EdmRelationshipAttribute("EncyclopediaModel", "FK_LicenseIDE_License", "License", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LanguagesEncyclopedia.Views.Home.License), "LicenseIDE", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LanguagesEncyclopedia.Views.Home.LicenseIDE), true)]

#endregion

namespace LanguagesEncyclopedia.Views.Home
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class EncyclopediaEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new EncyclopediaEntities object using the connection string found in the 'EncyclopediaEntities' section of the application configuration file.
        /// </summary>
        public EncyclopediaEntities() : base("name=EncyclopediaEntities", "EncyclopediaEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new EncyclopediaEntities object.
        /// </summary>
        public EncyclopediaEntities(string connectionString) : base(connectionString, "EncyclopediaEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new EncyclopediaEntities object.
        /// </summary>
        public EncyclopediaEntities(EntityConnection connection) : base(connection, "EncyclopediaEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<IDE> IDEs
        {
            get
            {
                if ((_IDEs == null))
                {
                    _IDEs = base.CreateObjectSet<IDE>("IDEs");
                }
                return _IDEs;
            }
        }
        private ObjectSet<IDE> _IDEs;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Language> Languages
        {
            get
            {
                if ((_Languages == null))
                {
                    _Languages = base.CreateObjectSet<Language>("Languages");
                }
                return _Languages;
            }
        }
        private ObjectSet<Language> _Languages;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<LanguageIDE> LanguageIDEs
        {
            get
            {
                if ((_LanguageIDEs == null))
                {
                    _LanguageIDEs = base.CreateObjectSet<LanguageIDE>("LanguageIDEs");
                }
                return _LanguageIDEs;
            }
        }
        private ObjectSet<LanguageIDE> _LanguageIDEs;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<LanguageParadigm> LanguageParadigms
        {
            get
            {
                if ((_LanguageParadigms == null))
                {
                    _LanguageParadigms = base.CreateObjectSet<LanguageParadigm>("LanguageParadigms");
                }
                return _LanguageParadigms;
            }
        }
        private ObjectSet<LanguageParadigm> _LanguageParadigms;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<LanguageRelationship> LanguageRelationships
        {
            get
            {
                if ((_LanguageRelationships == null))
                {
                    _LanguageRelationships = base.CreateObjectSet<LanguageRelationship>("LanguageRelationships");
                }
                return _LanguageRelationships;
            }
        }
        private ObjectSet<LanguageRelationship> _LanguageRelationships;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<LanguageTask> LanguageTasks
        {
            get
            {
                if ((_LanguageTasks == null))
                {
                    _LanguageTasks = base.CreateObjectSet<LanguageTask>("LanguageTasks");
                }
                return _LanguageTasks;
            }
        }
        private ObjectSet<LanguageTask> _LanguageTasks;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<License> Licenses
        {
            get
            {
                if ((_Licenses == null))
                {
                    _Licenses = base.CreateObjectSet<License>("Licenses");
                }
                return _Licenses;
            }
        }
        private ObjectSet<License> _Licenses;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<LicenseIDE> LicenseIDEs
        {
            get
            {
                if ((_LicenseIDEs == null))
                {
                    _LicenseIDEs = base.CreateObjectSet<LicenseIDE>("LicenseIDEs");
                }
                return _LicenseIDEs;
            }
        }
        private ObjectSet<LicenseIDE> _LicenseIDEs;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Paradigm> Paradigms
        {
            get
            {
                if ((_Paradigms == null))
                {
                    _Paradigms = base.CreateObjectSet<Paradigm>("Paradigms");
                }
                return _Paradigms;
            }
        }
        private ObjectSet<Paradigm> _Paradigms;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Solution> Solutions
        {
            get
            {
                if ((_Solutions == null))
                {
                    _Solutions = base.CreateObjectSet<Solution>("Solutions");
                }
                return _Solutions;
            }
        }
        private ObjectSet<Solution> _Solutions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Task> Tasks
        {
            get
            {
                if ((_Tasks == null))
                {
                    _Tasks = base.CreateObjectSet<Task>("Tasks");
                }
                return _Tasks;
            }
        }
        private ObjectSet<Task> _Tasks;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the IDEs EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToIDEs(IDE iDE)
        {
            base.AddObject("IDEs", iDE);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Languages EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLanguages(Language language)
        {
            base.AddObject("Languages", language);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the LanguageIDEs EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLanguageIDEs(LanguageIDE languageIDE)
        {
            base.AddObject("LanguageIDEs", languageIDE);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the LanguageParadigms EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLanguageParadigms(LanguageParadigm languageParadigm)
        {
            base.AddObject("LanguageParadigms", languageParadigm);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the LanguageRelationships EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLanguageRelationships(LanguageRelationship languageRelationship)
        {
            base.AddObject("LanguageRelationships", languageRelationship);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the LanguageTasks EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLanguageTasks(LanguageTask languageTask)
        {
            base.AddObject("LanguageTasks", languageTask);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Licenses EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLicenses(License license)
        {
            base.AddObject("Licenses", license);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the LicenseIDEs EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLicenseIDEs(LicenseIDE licenseIDE)
        {
            base.AddObject("LicenseIDEs", licenseIDE);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Paradigms EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToParadigms(Paradigm paradigm)
        {
            base.AddObject("Paradigms", paradigm);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Solutions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSolutions(Solution solution)
        {
            base.AddObject("Solutions", solution);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Tasks EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTasks(Task task)
        {
            base.AddObject("Tasks", task);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EncyclopediaModel", Name="IDE")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class IDE : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new IDE object.
        /// </summary>
        /// <param name="iDEID">Initial value of the IDEID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static IDE CreateIDE(global::System.Int32 iDEID, global::System.String name)
        {
            IDE iDE = new IDE();
            iDE.IDEID = iDEID;
            iDE.Name = name;
            return iDE;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IDEID
        {
            get
            {
                return _IDEID;
            }
            set
            {
                if (_IDEID != value)
                {
                    OnIDEIDChanging(value);
                    ReportPropertyChanging("IDEID");
                    _IDEID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IDEID");
                    OnIDEIDChanged();
                }
            }
        }
        private global::System.Int32 _IDEID;
        partial void OnIDEIDChanging(global::System.Int32 value);
        partial void OnIDEIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String URL
        {
            get
            {
                return _URL;
            }
            set
            {
                OnURLChanging(value);
                ReportPropertyChanging("URL");
                _URL = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("URL");
                OnURLChanged();
            }
        }
        private global::System.String _URL;
        partial void OnURLChanging(global::System.String value);
        partial void OnURLChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EncyclopediaModel", "FK_LanguageIDE_IDE", "LanguageIDE")]
        public EntityCollection<LanguageIDE> LanguageIDEs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LanguageIDE>("EncyclopediaModel.FK_LanguageIDE_IDE", "LanguageIDE");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LanguageIDE>("EncyclopediaModel.FK_LanguageIDE_IDE", "LanguageIDE", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EncyclopediaModel", "FK_LicenseIDE_IDE", "LicenseIDE")]
        public EntityCollection<LicenseIDE> LicenseIDEs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LicenseIDE>("EncyclopediaModel.FK_LicenseIDE_IDE", "LicenseIDE");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LicenseIDE>("EncyclopediaModel.FK_LicenseIDE_IDE", "LicenseIDE", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EncyclopediaModel", Name="Language")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Language : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Language object.
        /// </summary>
        /// <param name="languageID">Initial value of the LanguageID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="date">Initial value of the Date property.</param>
        public static Language CreateLanguage(global::System.Int32 languageID, global::System.String name, global::System.DateTime date)
        {
            Language language = new Language();
            language.LanguageID = languageID;
            language.Name = name;
            language.Date = date;
            return language;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LanguageID
        {
            get
            {
                return _LanguageID;
            }
            set
            {
                if (_LanguageID != value)
                {
                    OnLanguageIDChanging(value);
                    ReportPropertyChanging("LanguageID");
                    _LanguageID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LanguageID");
                    OnLanguageIDChanged();
                }
            }
        }
        private global::System.Int32 _LanguageID;
        partial void OnLanguageIDChanging(global::System.Int32 value);
        partial void OnLanguageIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Date
        {
            get
            {
                return _Date;
            }
            set
            {
                OnDateChanging(value);
                ReportPropertyChanging("Date");
                _Date = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Date");
                OnDateChanged();
            }
        }
        private global::System.DateTime _Date;
        partial void OnDateChanging(global::System.DateTime value);
        partial void OnDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Image
        {
            get
            {
                return _Image;
            }
            set
            {
                OnImageChanging(value);
                ReportPropertyChanging("Image");
                _Image = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Image");
                OnImageChanged();
            }
        }
        private global::System.String _Image;
        partial void OnImageChanging(global::System.String value);
        partial void OnImageChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EncyclopediaModel", "FK_LanguageIDE_Language", "LanguageIDE")]
        public EntityCollection<LanguageIDE> LanguageIDEs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LanguageIDE>("EncyclopediaModel.FK_LanguageIDE_Language", "LanguageIDE");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LanguageIDE>("EncyclopediaModel.FK_LanguageIDE_Language", "LanguageIDE", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EncyclopediaModel", "FK_LanguageParadigm_Language", "LanguageParadigm")]
        public EntityCollection<LanguageParadigm> LanguageParadigms
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LanguageParadigm>("EncyclopediaModel.FK_LanguageParadigm_Language", "LanguageParadigm");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LanguageParadigm>("EncyclopediaModel.FK_LanguageParadigm_Language", "LanguageParadigm", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EncyclopediaModel", "FK_LanguageRelationship_Language", "LanguageRelationship")]
        public EntityCollection<LanguageRelationship> LanguageRelationships
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LanguageRelationship>("EncyclopediaModel.FK_LanguageRelationship_Language", "LanguageRelationship");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LanguageRelationship>("EncyclopediaModel.FK_LanguageRelationship_Language", "LanguageRelationship", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EncyclopediaModel", "FK_LanguageRelationship_Language1", "LanguageRelationship")]
        public EntityCollection<LanguageRelationship> LanguageRelationships1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LanguageRelationship>("EncyclopediaModel.FK_LanguageRelationship_Language1", "LanguageRelationship");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LanguageRelationship>("EncyclopediaModel.FK_LanguageRelationship_Language1", "LanguageRelationship", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EncyclopediaModel", "FK_LanguageTask_Language", "LanguageTask")]
        public EntityCollection<LanguageTask> LanguageTasks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LanguageTask>("EncyclopediaModel.FK_LanguageTask_Language", "LanguageTask");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LanguageTask>("EncyclopediaModel.FK_LanguageTask_Language", "LanguageTask", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EncyclopediaModel", Name="LanguageIDE")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LanguageIDE : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new LanguageIDE object.
        /// </summary>
        /// <param name="languageIDEID">Initial value of the LanguageIDEID property.</param>
        /// <param name="languageID">Initial value of the LanguageID property.</param>
        /// <param name="iDEID">Initial value of the IDEID property.</param>
        public static LanguageIDE CreateLanguageIDE(global::System.Int32 languageIDEID, global::System.Int32 languageID, global::System.Int32 iDEID)
        {
            LanguageIDE languageIDE = new LanguageIDE();
            languageIDE.LanguageIDEID = languageIDEID;
            languageIDE.LanguageID = languageID;
            languageIDE.IDEID = iDEID;
            return languageIDE;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LanguageIDEID
        {
            get
            {
                return _LanguageIDEID;
            }
            set
            {
                if (_LanguageIDEID != value)
                {
                    OnLanguageIDEIDChanging(value);
                    ReportPropertyChanging("LanguageIDEID");
                    _LanguageIDEID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LanguageIDEID");
                    OnLanguageIDEIDChanged();
                }
            }
        }
        private global::System.Int32 _LanguageIDEID;
        partial void OnLanguageIDEIDChanging(global::System.Int32 value);
        partial void OnLanguageIDEIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LanguageID
        {
            get
            {
                return _LanguageID;
            }
            set
            {
                OnLanguageIDChanging(value);
                ReportPropertyChanging("LanguageID");
                _LanguageID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LanguageID");
                OnLanguageIDChanged();
            }
        }
        private global::System.Int32 _LanguageID;
        partial void OnLanguageIDChanging(global::System.Int32 value);
        partial void OnLanguageIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IDEID
        {
            get
            {
                return _IDEID;
            }
            set
            {
                OnIDEIDChanging(value);
                ReportPropertyChanging("IDEID");
                _IDEID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IDEID");
                OnIDEIDChanged();
            }
        }
        private global::System.Int32 _IDEID;
        partial void OnIDEIDChanging(global::System.Int32 value);
        partial void OnIDEIDChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EncyclopediaModel", "FK_LanguageIDE_IDE", "IDE")]
        public IDE IDE
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<IDE>("EncyclopediaModel.FK_LanguageIDE_IDE", "IDE").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<IDE>("EncyclopediaModel.FK_LanguageIDE_IDE", "IDE").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<IDE> IDEReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<IDE>("EncyclopediaModel.FK_LanguageIDE_IDE", "IDE");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<IDE>("EncyclopediaModel.FK_LanguageIDE_IDE", "IDE", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EncyclopediaModel", "FK_LanguageIDE_Language", "Language")]
        public Language Language
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Language>("EncyclopediaModel.FK_LanguageIDE_Language", "Language").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Language>("EncyclopediaModel.FK_LanguageIDE_Language", "Language").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Language> LanguageReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Language>("EncyclopediaModel.FK_LanguageIDE_Language", "Language");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Language>("EncyclopediaModel.FK_LanguageIDE_Language", "Language", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EncyclopediaModel", Name="LanguageParadigm")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LanguageParadigm : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new LanguageParadigm object.
        /// </summary>
        /// <param name="languageParadigmID">Initial value of the LanguageParadigmID property.</param>
        /// <param name="languageID">Initial value of the LanguageID property.</param>
        /// <param name="paradigmID">Initial value of the ParadigmID property.</param>
        public static LanguageParadigm CreateLanguageParadigm(global::System.Int32 languageParadigmID, global::System.Int32 languageID, global::System.Int32 paradigmID)
        {
            LanguageParadigm languageParadigm = new LanguageParadigm();
            languageParadigm.LanguageParadigmID = languageParadigmID;
            languageParadigm.LanguageID = languageID;
            languageParadigm.ParadigmID = paradigmID;
            return languageParadigm;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LanguageParadigmID
        {
            get
            {
                return _LanguageParadigmID;
            }
            set
            {
                if (_LanguageParadigmID != value)
                {
                    OnLanguageParadigmIDChanging(value);
                    ReportPropertyChanging("LanguageParadigmID");
                    _LanguageParadigmID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LanguageParadigmID");
                    OnLanguageParadigmIDChanged();
                }
            }
        }
        private global::System.Int32 _LanguageParadigmID;
        partial void OnLanguageParadigmIDChanging(global::System.Int32 value);
        partial void OnLanguageParadigmIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LanguageID
        {
            get
            {
                return _LanguageID;
            }
            set
            {
                OnLanguageIDChanging(value);
                ReportPropertyChanging("LanguageID");
                _LanguageID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LanguageID");
                OnLanguageIDChanged();
            }
        }
        private global::System.Int32 _LanguageID;
        partial void OnLanguageIDChanging(global::System.Int32 value);
        partial void OnLanguageIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ParadigmID
        {
            get
            {
                return _ParadigmID;
            }
            set
            {
                OnParadigmIDChanging(value);
                ReportPropertyChanging("ParadigmID");
                _ParadigmID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ParadigmID");
                OnParadigmIDChanged();
            }
        }
        private global::System.Int32 _ParadigmID;
        partial void OnParadigmIDChanging(global::System.Int32 value);
        partial void OnParadigmIDChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EncyclopediaModel", "FK_LanguageParadigm_Language", "Language")]
        public Language Language
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Language>("EncyclopediaModel.FK_LanguageParadigm_Language", "Language").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Language>("EncyclopediaModel.FK_LanguageParadigm_Language", "Language").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Language> LanguageReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Language>("EncyclopediaModel.FK_LanguageParadigm_Language", "Language");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Language>("EncyclopediaModel.FK_LanguageParadigm_Language", "Language", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EncyclopediaModel", "FK_LanguageParadigm_Paradigm", "Paradigm")]
        public Paradigm Paradigm
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Paradigm>("EncyclopediaModel.FK_LanguageParadigm_Paradigm", "Paradigm").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Paradigm>("EncyclopediaModel.FK_LanguageParadigm_Paradigm", "Paradigm").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Paradigm> ParadigmReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Paradigm>("EncyclopediaModel.FK_LanguageParadigm_Paradigm", "Paradigm");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Paradigm>("EncyclopediaModel.FK_LanguageParadigm_Paradigm", "Paradigm", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EncyclopediaModel", Name="LanguageRelationship")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LanguageRelationship : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new LanguageRelationship object.
        /// </summary>
        /// <param name="languageRelationshipID">Initial value of the LanguageRelationshipID property.</param>
        /// <param name="languageID">Initial value of the LanguageID property.</param>
        /// <param name="parentID">Initial value of the ParentID property.</param>
        public static LanguageRelationship CreateLanguageRelationship(global::System.Int32 languageRelationshipID, global::System.Int32 languageID, global::System.Int32 parentID)
        {
            LanguageRelationship languageRelationship = new LanguageRelationship();
            languageRelationship.LanguageRelationshipID = languageRelationshipID;
            languageRelationship.LanguageID = languageID;
            languageRelationship.ParentID = parentID;
            return languageRelationship;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LanguageRelationshipID
        {
            get
            {
                return _LanguageRelationshipID;
            }
            set
            {
                if (_LanguageRelationshipID != value)
                {
                    OnLanguageRelationshipIDChanging(value);
                    ReportPropertyChanging("LanguageRelationshipID");
                    _LanguageRelationshipID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LanguageRelationshipID");
                    OnLanguageRelationshipIDChanged();
                }
            }
        }
        private global::System.Int32 _LanguageRelationshipID;
        partial void OnLanguageRelationshipIDChanging(global::System.Int32 value);
        partial void OnLanguageRelationshipIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LanguageID
        {
            get
            {
                return _LanguageID;
            }
            set
            {
                OnLanguageIDChanging(value);
                ReportPropertyChanging("LanguageID");
                _LanguageID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LanguageID");
                OnLanguageIDChanged();
            }
        }
        private global::System.Int32 _LanguageID;
        partial void OnLanguageIDChanging(global::System.Int32 value);
        partial void OnLanguageIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ParentID
        {
            get
            {
                return _ParentID;
            }
            set
            {
                OnParentIDChanging(value);
                ReportPropertyChanging("ParentID");
                _ParentID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ParentID");
                OnParentIDChanged();
            }
        }
        private global::System.Int32 _ParentID;
        partial void OnParentIDChanging(global::System.Int32 value);
        partial void OnParentIDChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EncyclopediaModel", "FK_LanguageRelationship_Language", "Language")]
        public Language Language
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Language>("EncyclopediaModel.FK_LanguageRelationship_Language", "Language").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Language>("EncyclopediaModel.FK_LanguageRelationship_Language", "Language").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Language> LanguageReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Language>("EncyclopediaModel.FK_LanguageRelationship_Language", "Language");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Language>("EncyclopediaModel.FK_LanguageRelationship_Language", "Language", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EncyclopediaModel", "FK_LanguageRelationship_Language1", "Language")]
        public Language Language1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Language>("EncyclopediaModel.FK_LanguageRelationship_Language1", "Language").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Language>("EncyclopediaModel.FK_LanguageRelationship_Language1", "Language").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Language> Language1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Language>("EncyclopediaModel.FK_LanguageRelationship_Language1", "Language");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Language>("EncyclopediaModel.FK_LanguageRelationship_Language1", "Language", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EncyclopediaModel", Name="LanguageTask")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LanguageTask : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new LanguageTask object.
        /// </summary>
        /// <param name="languageTaskID">Initial value of the LanguageTaskID property.</param>
        /// <param name="languageID">Initial value of the LanguageID property.</param>
        /// <param name="taskID">Initial value of the TaskID property.</param>
        public static LanguageTask CreateLanguageTask(global::System.Int32 languageTaskID, global::System.Int32 languageID, global::System.Int32 taskID)
        {
            LanguageTask languageTask = new LanguageTask();
            languageTask.LanguageTaskID = languageTaskID;
            languageTask.LanguageID = languageID;
            languageTask.TaskID = taskID;
            return languageTask;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LanguageTaskID
        {
            get
            {
                return _LanguageTaskID;
            }
            set
            {
                if (_LanguageTaskID != value)
                {
                    OnLanguageTaskIDChanging(value);
                    ReportPropertyChanging("LanguageTaskID");
                    _LanguageTaskID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LanguageTaskID");
                    OnLanguageTaskIDChanged();
                }
            }
        }
        private global::System.Int32 _LanguageTaskID;
        partial void OnLanguageTaskIDChanging(global::System.Int32 value);
        partial void OnLanguageTaskIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LanguageID
        {
            get
            {
                return _LanguageID;
            }
            set
            {
                OnLanguageIDChanging(value);
                ReportPropertyChanging("LanguageID");
                _LanguageID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LanguageID");
                OnLanguageIDChanged();
            }
        }
        private global::System.Int32 _LanguageID;
        partial void OnLanguageIDChanging(global::System.Int32 value);
        partial void OnLanguageIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TaskID
        {
            get
            {
                return _TaskID;
            }
            set
            {
                OnTaskIDChanging(value);
                ReportPropertyChanging("TaskID");
                _TaskID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TaskID");
                OnTaskIDChanged();
            }
        }
        private global::System.Int32 _TaskID;
        partial void OnTaskIDChanging(global::System.Int32 value);
        partial void OnTaskIDChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EncyclopediaModel", "FK_LanguageTask_Language", "Language")]
        public Language Language
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Language>("EncyclopediaModel.FK_LanguageTask_Language", "Language").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Language>("EncyclopediaModel.FK_LanguageTask_Language", "Language").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Language> LanguageReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Language>("EncyclopediaModel.FK_LanguageTask_Language", "Language");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Language>("EncyclopediaModel.FK_LanguageTask_Language", "Language", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EncyclopediaModel", "FK_LanguageTask_Task", "Task")]
        public Task Task
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Task>("EncyclopediaModel.FK_LanguageTask_Task", "Task").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Task>("EncyclopediaModel.FK_LanguageTask_Task", "Task").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Task> TaskReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Task>("EncyclopediaModel.FK_LanguageTask_Task", "Task");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Task>("EncyclopediaModel.FK_LanguageTask_Task", "Task", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EncyclopediaModel", "FK_Solution_LanguageTask", "Solution")]
        public EntityCollection<Solution> Solutions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Solution>("EncyclopediaModel.FK_Solution_LanguageTask", "Solution");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Solution>("EncyclopediaModel.FK_Solution_LanguageTask", "Solution", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EncyclopediaModel", Name="License")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class License : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new License object.
        /// </summary>
        /// <param name="licenseID">Initial value of the LicenseID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static License CreateLicense(global::System.Int32 licenseID, global::System.String name)
        {
            License license = new License();
            license.LicenseID = licenseID;
            license.Name = name;
            return license;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LicenseID
        {
            get
            {
                return _LicenseID;
            }
            set
            {
                if (_LicenseID != value)
                {
                    OnLicenseIDChanging(value);
                    ReportPropertyChanging("LicenseID");
                    _LicenseID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LicenseID");
                    OnLicenseIDChanged();
                }
            }
        }
        private global::System.Int32 _LicenseID;
        partial void OnLicenseIDChanging(global::System.Int32 value);
        partial void OnLicenseIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EncyclopediaModel", "FK_LicenseIDE_License", "LicenseIDE")]
        public EntityCollection<LicenseIDE> LicenseIDEs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LicenseIDE>("EncyclopediaModel.FK_LicenseIDE_License", "LicenseIDE");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LicenseIDE>("EncyclopediaModel.FK_LicenseIDE_License", "LicenseIDE", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EncyclopediaModel", Name="LicenseIDE")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LicenseIDE : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new LicenseIDE object.
        /// </summary>
        /// <param name="licenseIDEID">Initial value of the LicenseIDEID property.</param>
        /// <param name="licenseID">Initial value of the LicenseID property.</param>
        /// <param name="iDEID">Initial value of the IDEID property.</param>
        public static LicenseIDE CreateLicenseIDE(global::System.Int32 licenseIDEID, global::System.Int32 licenseID, global::System.Int32 iDEID)
        {
            LicenseIDE licenseIDE = new LicenseIDE();
            licenseIDE.LicenseIDEID = licenseIDEID;
            licenseIDE.LicenseID = licenseID;
            licenseIDE.IDEID = iDEID;
            return licenseIDE;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LicenseIDEID
        {
            get
            {
                return _LicenseIDEID;
            }
            set
            {
                if (_LicenseIDEID != value)
                {
                    OnLicenseIDEIDChanging(value);
                    ReportPropertyChanging("LicenseIDEID");
                    _LicenseIDEID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LicenseIDEID");
                    OnLicenseIDEIDChanged();
                }
            }
        }
        private global::System.Int32 _LicenseIDEID;
        partial void OnLicenseIDEIDChanging(global::System.Int32 value);
        partial void OnLicenseIDEIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LicenseID
        {
            get
            {
                return _LicenseID;
            }
            set
            {
                OnLicenseIDChanging(value);
                ReportPropertyChanging("LicenseID");
                _LicenseID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LicenseID");
                OnLicenseIDChanged();
            }
        }
        private global::System.Int32 _LicenseID;
        partial void OnLicenseIDChanging(global::System.Int32 value);
        partial void OnLicenseIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IDEID
        {
            get
            {
                return _IDEID;
            }
            set
            {
                OnIDEIDChanging(value);
                ReportPropertyChanging("IDEID");
                _IDEID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IDEID");
                OnIDEIDChanged();
            }
        }
        private global::System.Int32 _IDEID;
        partial void OnIDEIDChanging(global::System.Int32 value);
        partial void OnIDEIDChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EncyclopediaModel", "FK_LicenseIDE_IDE", "IDE")]
        public IDE IDE
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<IDE>("EncyclopediaModel.FK_LicenseIDE_IDE", "IDE").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<IDE>("EncyclopediaModel.FK_LicenseIDE_IDE", "IDE").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<IDE> IDEReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<IDE>("EncyclopediaModel.FK_LicenseIDE_IDE", "IDE");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<IDE>("EncyclopediaModel.FK_LicenseIDE_IDE", "IDE", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EncyclopediaModel", "FK_LicenseIDE_License", "License")]
        public License License
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<License>("EncyclopediaModel.FK_LicenseIDE_License", "License").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<License>("EncyclopediaModel.FK_LicenseIDE_License", "License").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<License> LicenseReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<License>("EncyclopediaModel.FK_LicenseIDE_License", "License");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<License>("EncyclopediaModel.FK_LicenseIDE_License", "License", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EncyclopediaModel", Name="Paradigm")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Paradigm : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Paradigm object.
        /// </summary>
        /// <param name="paradigmID">Initial value of the ParadigmID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Paradigm CreateParadigm(global::System.Int32 paradigmID, global::System.String name)
        {
            Paradigm paradigm = new Paradigm();
            paradigm.ParadigmID = paradigmID;
            paradigm.Name = name;
            return paradigm;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ParadigmID
        {
            get
            {
                return _ParadigmID;
            }
            set
            {
                if (_ParadigmID != value)
                {
                    OnParadigmIDChanging(value);
                    ReportPropertyChanging("ParadigmID");
                    _ParadigmID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ParadigmID");
                    OnParadigmIDChanged();
                }
            }
        }
        private global::System.Int32 _ParadigmID;
        partial void OnParadigmIDChanging(global::System.Int32 value);
        partial void OnParadigmIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EncyclopediaModel", "FK_LanguageParadigm_Paradigm", "LanguageParadigm")]
        public EntityCollection<LanguageParadigm> LanguageParadigms
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LanguageParadigm>("EncyclopediaModel.FK_LanguageParadigm_Paradigm", "LanguageParadigm");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LanguageParadigm>("EncyclopediaModel.FK_LanguageParadigm_Paradigm", "LanguageParadigm", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EncyclopediaModel", Name="Solution")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Solution : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Solution object.
        /// </summary>
        /// <param name="solutionID">Initial value of the SolutionID property.</param>
        /// <param name="description">Initial value of the Description property.</param>
        /// <param name="languageTaskID">Initial value of the LanguageTaskID property.</param>
        public static Solution CreateSolution(global::System.Int32 solutionID, global::System.String description, global::System.Int32 languageTaskID)
        {
            Solution solution = new Solution();
            solution.SolutionID = solutionID;
            solution.Description = description;
            solution.LanguageTaskID = languageTaskID;
            return solution;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SolutionID
        {
            get
            {
                return _SolutionID;
            }
            set
            {
                if (_SolutionID != value)
                {
                    OnSolutionIDChanging(value);
                    ReportPropertyChanging("SolutionID");
                    _SolutionID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SolutionID");
                    OnSolutionIDChanged();
                }
            }
        }
        private global::System.Int32 _SolutionID;
        partial void OnSolutionIDChanging(global::System.Int32 value);
        partial void OnSolutionIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LanguageTaskID
        {
            get
            {
                return _LanguageTaskID;
            }
            set
            {
                OnLanguageTaskIDChanging(value);
                ReportPropertyChanging("LanguageTaskID");
                _LanguageTaskID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LanguageTaskID");
                OnLanguageTaskIDChanged();
            }
        }
        private global::System.Int32 _LanguageTaskID;
        partial void OnLanguageTaskIDChanging(global::System.Int32 value);
        partial void OnLanguageTaskIDChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EncyclopediaModel", "FK_Solution_LanguageTask", "LanguageTask")]
        public LanguageTask LanguageTask
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<LanguageTask>("EncyclopediaModel.FK_Solution_LanguageTask", "LanguageTask").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<LanguageTask>("EncyclopediaModel.FK_Solution_LanguageTask", "LanguageTask").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<LanguageTask> LanguageTaskReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<LanguageTask>("EncyclopediaModel.FK_Solution_LanguageTask", "LanguageTask");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<LanguageTask>("EncyclopediaModel.FK_Solution_LanguageTask", "LanguageTask", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EncyclopediaModel", Name="Task")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Task : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Task object.
        /// </summary>
        /// <param name="taskID">Initial value of the TaskID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="description">Initial value of the Description property.</param>
        public static Task CreateTask(global::System.Int32 taskID, global::System.String name, global::System.String description)
        {
            Task task = new Task();
            task.TaskID = taskID;
            task.Name = name;
            task.Description = description;
            return task;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TaskID
        {
            get
            {
                return _TaskID;
            }
            set
            {
                if (_TaskID != value)
                {
                    OnTaskIDChanging(value);
                    ReportPropertyChanging("TaskID");
                    _TaskID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TaskID");
                    OnTaskIDChanged();
                }
            }
        }
        private global::System.Int32 _TaskID;
        partial void OnTaskIDChanging(global::System.Int32 value);
        partial void OnTaskIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EncyclopediaModel", "FK_LanguageTask_Task", "LanguageTask")]
        public EntityCollection<LanguageTask> LanguageTasks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LanguageTask>("EncyclopediaModel.FK_LanguageTask_Task", "LanguageTask");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LanguageTask>("EncyclopediaModel.FK_LanguageTask_Task", "LanguageTask", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
